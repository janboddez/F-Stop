<?php

namespace Plugins\EntryTypes;

use App\Models\Entry;
use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Str;
use Michelf\MarkdownExtra;

class EntryTypesServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register()
    {
        // Two things: (1) We have to explicitly register routes. Can't rely on the filter below, it seems. (2) If we
        // used `boot()` here, these routes would get registered too late (i.e., after "core's" catch-all "page route").
        $this->loadRoutesFrom(__DIR__ . '/../routes.php');
        $this->registerHooks();
    }

    protected function registerHooks(): void
    {
        // Add "short-form" entry types.
        add_filter('entries.registered_types', function ($types) {
            $types['note'] = ['icon' => 'mdi mdi-message-outline'];
            $types['like'] = ['icon' => 'mdi mdi-star-outline'];
            // $types['listen'] = ['icon' => 'mdi mdi-playlist-music'];

            return $types;
        });

        // Overwrite name with an autogenerated, for these "short-form" entry types.
        add_filter('entries.set_name', function ($name, $entry) {
            if (! in_array($entry->type, ['note', 'like'/*, 'listen'*/], true)) {
                return $name;
            }

            // Ensure notes, likes, and listens get a name based off their content.
            $content = MarkdownExtra::defaultTransform($entry->content);
            $content = trim(strip_tags($content));

            $name = Str::words($content, 10, ' â€¦');

            // Decode quotes, etc. (We escape on output, at least on the front end.)
            $name = html_entity_decode($name, ENT_HTML5, 'UTF-8');
            $name = preg_replace('~\s+~', ' ', $name); // Get rid of excess whitespace.
            $name = Str::limit($name, 250, 'â€¦'); // Shorten (again).

            return $name;
        }, 20, 2);

        /**
         * To bypass "core's" slug generation process.
         *
         * @param  string             $slug  Whether to bypass "core" behavior. Default `null`.
         * @param  \App\Models\Entry  $entry The entry being saved.
         * @return string|null               Autogenerated slug, or `null`.
         */
        add_filter('entries.set_slug', function ($slug, $entry) {
            if (! in_array($entry->type, ['note', 'like'/*, 'listen'*/], true)) {
                return $slug;
            }

            if (! empty($entry->slug)) {
                // A slug was set previously; let "core" do its thing.
                return $slug;
            }

            // Ensure notes, likes, and listens get a random slug rather than a title-based one.
            return random_slug();
        }, 20, 2);
    }
}
